import React,{useState, Fragment} from 'react';
import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';
import './App.css';
import NavBar from './components/layout/NavBar';
import Alert from './components/layout/Alert';
import Users from './components/users/Users';
import User from './components/users/User';
import Search from './components/users/Search';
import About from './components/pages/About';
import axios from 'axios';
import GithubState from './context/github/GithubState';

const App = () =>{
  const [users, setUsers] = useState([]);
  const [user, setUser] = useState({});
  const [repos, setRepos] = useState([]);
  const [loading, setloading] = useState(false);
  const [alert, setAlert] = useState(null);
  
  //Search GitHub Users
  const searchUsers = async (text) =>{
    setloading(true);
    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);
    //this.setState({users: res.data.items, loading:false});
    setUsers(res.data.items);
    setloading(false);
  }
  //Get Single github user
  const getUser = async(username) => {
    setloading(true);
    const res = await axios.get(`https://api.github.com/users/${username}?client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);
    //this.setState({user: res.data, loading:false});
    setUser(res.data);
    setloading(false);
  }
  //GetUser Repos
  const getUserRepos= async(username) => {
   // this.setState({loading: true});
   setloading(true);
    const res = await axios.get(`https://api.github.com/users/${username}/repos?per_page=5&sort=created:asc&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secret=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);
    //this.setState({repos: res.data, loading:false});
    setRepos(res.data);
    setloading(false);
  }

  //Clear Users
  const clearUsers  = () => { setUsers([]);
    setloading(false);}
  /* this.setState({users: [], loading: false}); */

  //Alert
  const showAlert = (msg, type) =>{
    //this.setState({alert:{msg,type}});
    setAlert({msg,type});
    setTimeout(() => setAlert(null),5000);
  } 
    return(
    <GithubState>
      {/* /github state provider/ */}
    <Router>
     <div className="App">
     <NavBar/>
     <div className='container'>
     <Alert alert={alert}/>
      <Switch>
        <Route exact path='/'  render={props => (
          <Fragment>
            <Search 
            setAlert={showAlert}/>
            <Users />
          </Fragment>
        )} />
        <Route exact path='/about' component={About}/>
         <Route exact path='/user/:login' render={props => (
           <User {...props } getUser={getUser} getUserRepos={getUserRepos} user={user} repos={repos} loading={loading} />
         )} /> 
      </Switch>
     </div>
     </div>
    </Router> 
    </GithubState>
  );
}

export default App;
